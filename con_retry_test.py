# Copyright (c) 2018 Ken Bannister. All rights reserved.
#
# This file is subject to the terms and conditions of the GNU Lesser
# General Public License v2.1. See the file LICENSE in the top level
# directory for more details.

"""
Tests CoAP confirmable message retry capability.

Sends a GET request to a server that ignores a configurable number of requests.
Tests both the gcoap example and a nanocoap client.

Requires:
   - RIOTBASE env variable for RIOT root directory

   - Native only board; network with tap bridge and two endpoints, tap0 and
     tap1.
"""

import pytest
import os
import pexpect
import re
import time
import logging

from conftest import ExpectHost

logging.basicConfig(level=logging.INFO)

#
# fixtures and utility functions
#

@pytest.fixture
def server_cli(server_values, ignores):
    """
    Provides an ExpectHost that runs a CoAP server that can ignore requests.
    Runs on port tap0. Reads and stores server address in server_values['addr'].
    """
    base_folder = os.environ.get('RIOTBASE', None)

    host = ExpectHost(os.path.join(base_folder, 'tests/nanocoap_cli'),
                      'make term', env={'PORT':'tap0'})
    term = host.connect()
    term.expect('nanocoap test app')

    # pause to allow network setup to complete
    time.sleep(2)

    # collect and store server address
    term.sendline('inet6')

    pattern = r'inet6 addr: ([0-9a-f:]+)  scope: local'
    term.expect(pattern)

    match = re.search(pattern, term.after)
    server_values['addr'] = match.group(1)

    host.send_recv('server start -i {0}'.format(ignores), 'starting server')

    yield host

    # teardown
    host.disconnect()


@pytest.fixture
def gcoap_cli():
    """
    Runs an ExpectHost for the RIOT gcoap CLI example. Like 'gcoap_example'
    fixture, but runs on port tap1.
    """
    base_folder = os.environ.get('RIOTBASE', None)
        
    host = ExpectHost(os.path.join(base_folder, 'examples/gcoap'), 'make term',
                      env={'PORT':'tap1'}, name='gcoap')
    term = host.connect()
    term.expect('gcoap .* app')

    # pause to allow network setup to complete
    time.sleep(2)

    yield host

    # teardown
    host.disconnect()


@pytest.fixture
def nanocoap_cli_bridge():
    """
    Provides an ExpectHost that runs the RIOT nanocoap client CLI test app.
    Unable to set up server address. Only runs in a native environment, on
    tap1.
    """
    base_folder = os.environ.get('RIOTBASE', None)

    host = ExpectHost(os.path.join(base_folder, 'tests/nanocoap_cli'),
                      'make term', env={'PORT':'tap1'}, name='nanocoap')
    term = host.connect()
    term.expect('nanocoap test app')

    # pause to allow network setup to complete
    time.sleep(2)

    yield host

    # teardown
    host.disconnect()


@pytest.fixture
def ignores():
    """
    Count of requests to ignore. We expect the value is initialized by the
    test.
    """
    return 0

@pytest.fixture
def server_values():
    """
    Values generated by the retry server cli fixture that are useful outside
    of that fixture. Determines the address of the server.
    """
    return { 'addr' : None }

def send_recv(client, server_values):
    """
    Sends a CoAP GET from provided client to server. Expects a '0' response.
    """
    cmd_name    = 'coap' if client.name == 'gcoap' else 'client'
    confirm_arg = '-c' if client.name == 'gcoap' else ''
    
    cmd_line = '{0} get {1} {2} 5683 /value'
    client.send_recv(cmd_line.format(cmd_name, confirm_arg,
                                     server_values['addr']),
                     r'code 2\.05.*\r\n0')

#
# tests
#

@pytest.mark.parametrize('ignores', [2])
def test_recover_gcoap(server_cli, server_values, gcoap_cli, ignores):
    """gcoap recovers from 2 ignored requests and receives /value."""
    send_recv(gcoap_cli, server_values)

@pytest.mark.parametrize('ignores', [2])
def test_recover_nano(server_cli, server_values, nanocoap_cli_bridge, ignores):
    """nanocoap recovers from 2 ignored requests and receives /value."""
    send_recv(nanocoap_cli_bridge, server_values)


@pytest.mark.parametrize('ignores', [5])
def test_timeout_gcoap(server_cli, server_values, gcoap_cli, ignores):
    """gcoap times out from 5 ignored requests."""
    gcoap_cli.timeout = 100

    with pytest.raises(pexpect.TIMEOUT):
        send_recv(gcoap_cli, server_values)


@pytest.mark.parametrize('ignores', [5])
def test_timeout_nano(server_cli, server_values, nanocoap_cli_bridge, ignores):
    """nanocoap times out from 5 ignored requests."""
    nanocoap_cli_bridge.timeout = 100

    with pytest.raises(pexpect.TIMEOUT):
        send_recv(nanocoap_cli_bridge, server_values)
